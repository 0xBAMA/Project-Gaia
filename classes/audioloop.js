// Generated by CoffeeScript 1.10.0
(function() {
  ProjectGaia.AudioLoop = (function() {
    function AudioLoop(options) {
      var base;
      this.options = options;
      this.options.loadingManager.itemStart(this.options.url);
      if ((base = this.options).topVolume == null) {
        base.topVolume = 1;
      }
      this.volume = this.options.topVolume;
      this.targetVolume = this.volume;
      this.audio = new Audio(this.options.url);
      this.audio.volume = 0;
      this.audio.addEventListener('canplaythrough', (function(_this) {
        return function(event) {
          _this.duration = _this.audio.duration;
          if (_this.options.crossoverDuration) {
            _this.nextAudio = new Audio(_this.options.url);
            _this.nextAudio.volume = 0;
          } else {
            _this.audio.loop = true;
          }
          return _this.options.loadingManager.itemEnd(_this.options.url);
        };
      })(this));
    }

    AudioLoop.prototype.play = function() {
      return this.audio.play();
    };

    AudioLoop.prototype.mute = function() {
      this.targetVolume = 0;
      return this._startTargetVolumeChange(0.5);
    };

    AudioLoop.prototype.unmute = function() {
      this.targetVolume = this.options.topVolume;
      return this._startTargetVolumeChange(4.0);
    };

    AudioLoop.prototype._startTargetVolumeChange = function(duration) {
      this._timeToVolumeChangeEnd = duration;
      return this._volumeChangeRate = (this.targetVolume - this.volume) / this._timeToVolumeChangeEnd;
    };

    AudioLoop.prototype.update = function(gameTime) {
      var fadeInVolume, fadeOutVolume, fadeVolume, ref, time;
      if (this._timeToVolumeChangeEnd > 0) {
        this._timeToVolumeChangeEnd = Math.max(0, this._timeToVolumeChangeEnd - gameTime.elapsedGameTime);
        this.volume = this.targetVolume - this._volumeChangeRate * this._timeToVolumeChangeEnd;
      }
      time = this.audio.currentTime;
      if (this.options.crossoverDuration) {
        fadeInVolume = time / this.options.crossoverDuration;
        fadeOutVolume = (this.duration - time) / this.options.crossoverDuration;
        fadeVolume = THREE.MathUtils.clamp(Math.min(fadeInVolume, fadeOutVolume), 0, 1);
      } else {
        fadeVolume = 1;
      }
      this.audio.volume = fadeVolume * this.volume;
      if (this.nextAudio && !this.nextAudio.paused) {
        this.nextAudio.volume = (1 - fadeVolume) * this.volume;
      }
      if (this.options.crossoverDuration) {
        if (this.nextAudio.paused && time >= this.duration - this.options.crossoverDuration) {
          this.nextAudio.currentTime = 0;
          this.nextAudio.play();
        }
        if (this.audio.ended || time > this.duration) {
          this.audio.pause();
          return ref = [this.nextAudio, this.audio], this.audio = ref[0], this.nextAudio = ref[1], ref;
        }
      }
    };

    return AudioLoop;

  })();

}).call(this);

//# sourceMappingURL=audioloop.js.map
