// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var ProjectGaia;

  ProjectGaia = (function() {
    function ProjectGaia() {
      var ambientLight, directionalLight, shadowCameraHalfSize;
      this.renderer = new THREE.WebGLRenderer;
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.shadowMap.enabled = true;
      this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      this.renderer.setClearColor(new THREE.Color(0.05, 0.05, 0.1), 1);
      document.body.appendChild(this.renderer.domElement);
      this.scene = new THREE.Scene;
      ambientLight = new THREE.AmbientLight(0x606090);
      this.scene.add(ambientLight);
      directionalLight = new THREE.DirectionalLight(0xffffdd, 1);
      directionalLight.castShadow = true;
      shadowCameraHalfSize = 50;
      directionalLight.shadow.camera.left = -shadowCameraHalfSize;
      directionalLight.shadow.camera.right = shadowCameraHalfSize;
      directionalLight.shadow.camera.top = shadowCameraHalfSize;
      directionalLight.shadow.camera.bottom = -shadowCameraHalfSize;
      directionalLight.shadow.camera.near = 10;
      directionalLight.shadow.camera.far = 150;
      directionalLight.shadow.mapSize.width = 4096;
      directionalLight.shadow.mapSize.height = 4096;
      directionalLight.shadow.bias = -0.001;
      directionalLight.position.set(30, 50, 40);
      this.scene.add(directionalLight);
      this.loadingManager = new THREE.LoadingManager((function(_this) {
        return function() {
          console.log("Loading finished!");
          return _this.initialize();
        };
      })(this), (function(_this) {
        return function(url, itemsLoaded, itemsTotal) {
          return console.log("Loaded " + itemsLoaded + " of " + itemsTotal);
        };
      })(this), (function(_this) {
        return function(url) {
          return console.log("Loading error with", url);
        };
      })(this));
      ProjectGaia.Materials.VoxelWorld.load(this.loadingManager);
      ProjectGaia.Materials.BlocksInformation.load(this.loadingManager);
      ProjectGaia.Materials.VegetationInformation.load(this.loadingManager);
      ProjectGaia.VoxelWorld.load(this.loadingManager);
    }

    ProjectGaia.prototype.initialize = function() {
      var ground, groundGeometry, groundMaterial, model, worldSizeVector;
      model = ProjectGaia.VoxelWorld.environmentModel;
      this.worldSize = {
        width: model.width,
        height: model.height + 20,
        depth: model.depth
      };
      worldSizeVector = new THREE.Vector3(this.worldSize.width, this.worldSize.height, this.worldSize.depth);
      groundGeometry = new THREE.PlaneBufferGeometry(this.worldSize.width + 100, this.worldSize.depth + 100);
      groundMaterial = new THREE.MeshLambertMaterial({
        color: 0x808080
      });
      ground = new THREE.Mesh(groundGeometry, groundMaterial);
      ground.receiveShadow = true;
      ground.rotation.x = -Math.PI / 2;
      this.voxelWorld = new ProjectGaia.VoxelWorld(this.worldSize);
      this.materialsDataTexture = new ProjectGaia.MaterialsDataTexture;
      this.vegetationDataTexture = new ProjectGaia.VegetationDataTexture;
      this.blocksInformationTexture = new ProjectGaia.ComputedTexture({
        renderer: this.renderer,
        initializationTexture: this.voxelWorld.startingBlocksInformationTexture,
        mapName: 'blocksInformation'
      });
      this.vegetationInformationTexture = new ProjectGaia.ComputedTexture({
        renderer: this.renderer,
        mapName: 'vegetationInformation',
        width: this.voxelWorld.startingBlocksInformationTexture.image.width,
        height: this.voxelWorld.startingBlocksInformationTexture.image.height
      });
      this.blocksInformationMaterial = new ProjectGaia.Materials.BlocksInformation({
        materialsDataTexture: this.materialsDataTexture,
        blocksInformationTexture: this.blocksInformationTexture,
        vegetationInformationTexture: this.vegetationInformationTexture,
        worldSizeVector: worldSizeVector
      });
      this.blocksInformationTexture.setMaterial(this.blocksInformationMaterial);
      this.vegetationInformationMaterial = new ProjectGaia.Materials.VegetationInformation({
        materialsDataTexture: this.materialsDataTexture,
        vegetationDataTexture: this.vegetationDataTexture,
        blocksInformationTexture: this.blocksInformationTexture,
        vegetationInformationTexture: this.vegetationInformationTexture,
        worldSizeVector: worldSizeVector
      });
      this.vegetationInformationTexture.setMaterial(this.vegetationInformationMaterial);
      this.voxelWorldMaterial = new ProjectGaia.Materials.VoxelWorld({
        materialsDataTexture: this.materialsDataTexture,
        blocksInformationTexture: this.blocksInformationTexture,
        worldSizeVector: worldSizeVector
      });
      this.voxelWorldDepthMaterial = new ProjectGaia.Materials.VoxelWorld.Depth({
        blocksInformationTexture: this.blocksInformationTexture,
        worldSizeVector: worldSizeVector
      });
      this.voxelMesh = new ProjectGaia.VoxelMesh(_.extend({
        world: this.voxelWorld,
        material: this.voxelWorldMaterial
      }, this.worldSize));
      this.voxelMesh.castShadow = true;
      this.voxelMesh.receiveShadow = true;
      this.voxelMesh.customDepthMaterial = this.voxelWorldDepthMaterial;
      this.voxelMesh.position.set(-this.worldSize.width / 2, -5, -this.worldSize.depth / 2);
      this.scene.add(this.voxelMesh);
      this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 400);
      this.camera.position.set(0, this.worldSize.height, this.worldSize.depth * 1.75);
      this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
      document.addEventListener('keypress', (function(_this) {
        return function(event) {
          switch (event.keyCode) {
            case 104:
              return _this.voxelWorldMaterial.uniforms.visualizeHumidity.value = !_this.voxelWorldMaterial.uniforms.visualizeHumidity.value;
            case 116:
              return _this.voxelWorldMaterial.uniforms.visualizeTemperature.value = !_this.voxelWorldMaterial.uniforms.visualizeTemperature.value;
          }
        };
      })(this));
      this.simulationAccumulatedTime = 0;
      this.simulationGameTime = {
        totalGameTime: 0,
        elapsedGameTime: 0.2
      };
      this.vegetationUpdateGameTime = {
        totalGameTime: 0,
        elapsedGameTime: 0.2
      };
      this.vegetationAccumulatedTime = this.vegetationUpdateGameTime.elapsedGameTime / 2;
      return this.initialized = true;
    };

    ProjectGaia.prototype.update = function(gameTime) {
      if (!this.initialized) {
        return;
      }
      this.vegetationAccumulatedTime += gameTime.elapsedGameTime;
      if (this.vegetationAccumulatedTime > this.vegetationUpdateGameTime.elapsedGameTime) {
        this.vegetationAccumulatedTime -= this.vegetationUpdateGameTime.elapsedGameTime;
        this.vegetationUpdateGameTime.totalGameTime += this.vegetationUpdateGameTime.elapsedGameTime;
        this.vegetationInformationMaterial.update(this.vegetationUpdateGameTime);
        this.vegetationInformationTexture.update(this.vegetationUpdateGameTime);
      }
      this.simulationAccumulatedTime += gameTime.elapsedGameTime;
      if (this.simulationAccumulatedTime > this.simulationGameTime.elapsedGameTime) {
        this.simulationAccumulatedTime -= this.simulationGameTime.elapsedGameTime;
        this.simulationGameTime.totalGameTime += this.simulationGameTime.elapsedGameTime;
        this.blocksInformationMaterial.update(this.simulationGameTime);
        this.blocksInformationTexture.update(this.simulationGameTime);
        this.voxelWorldMaterial.update(this.simulationGameTime);
        this.voxelWorldDepthMaterial.update(this.simulationGameTime);
      }
      return this.controls.update(gameTime);
    };

    ProjectGaia.prototype.draw = function(gameTime) {
      if (!this.initialized) {
        return;
      }
      this.renderer.setRenderTarget(null);
      return this.renderer.render(this.scene, this.camera);
    };

    return ProjectGaia;

  })();

  window.ProjectGaia = ProjectGaia;

}).call(this);

//# sourceMappingURL=projectgaia.js.map
