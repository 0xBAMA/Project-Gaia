// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ProjectGaia.Materials.VoxelWorld = (function(superClass) {
    extend(VoxelWorld, superClass);

    VoxelWorld.load = function(loadingManager) {
      new THREE.FileLoader(loadingManager).load('classes/materials/voxelworld-vertex.glsl', (function(_this) {
        return function(vertexShader) {
          _this.vertexShader = vertexShader;
        };
      })(this));
      new THREE.FileLoader(loadingManager).load('classes/materials/voxelworld-fragment.glsl', (function(_this) {
        return function(fragmentShader) {
          _this.fragmentShader = fragmentShader;
        };
      })(this));
      new THREE.FileLoader(loadingManager).load('classes/materials/voxelworld-common.glsl', (function(_this) {
        return function(shaderChunk) {
          return THREE.ShaderChunk.voxelworld_common = shaderChunk;
        };
      })(this));
      new THREE.FileLoader(loadingManager).load('classes/materials/voxelworld-parameters-vertex.glsl', (function(_this) {
        return function(shaderChunk) {
          return THREE.ShaderChunk.voxelworld_pars_vertex = shaderChunk;
        };
      })(this));
      return new THREE.FileLoader(loadingManager).load('classes/materials/voxelworld-discardinvisible-vertex.glsl', (function(_this) {
        return function(shaderChunk) {
          return THREE.ShaderChunk.voxelworld_discardinvisible_vertex = shaderChunk;
        };
      })(this));
    };

    function VoxelWorld(options) {
      var parameters;
      parameters = {
        lights: true,
        blending: THREE.NoBlending,
        side: THREE.FrontSide,
        shadowSide: THREE.FrontSide,
        uniforms: _.extend({
          blocksInformation: {
            value: null
          },
          blocksInformationSize: {
            value: new THREE.Vector2(options.blocksInformationTexture.texture.image.width, options.blocksInformationTexture.texture.image.height)
          },
          materialData: {
            value: options.materialsDataTexture
          },
          materialDataSize: {
            value: new THREE.Vector2(options.materialsDataTexture.image.width, options.materialsDataTexture.image.height)
          },
          worldSize: {
            value: options.worldSizeVector
          },
          blockTypesCount: {
            value: _.keys(ProjectGaia.BlockTypes).length
          }
        }, ProjectGaia.Materials.getTimeUniforms(), THREE.UniformsLib.lights),
        vertexShader: this.constructor.vertexShader,
        fragmentShader: this.constructor.fragmentShader
      };
      VoxelWorld.__super__.constructor.call(this, parameters);
      this.options = options;
    }

    VoxelWorld.prototype.update = function(gameTime) {
      ProjectGaia.Materials.updateTimeUniforms(this.uniforms, gameTime);
      return this.uniforms.blocksInformation.value = this.options.blocksInformationTexture.texture;
    };

    return VoxelWorld;

  })(THREE.ShaderMaterial);

}).call(this);

//# sourceMappingURL=voxelworld.js.map
