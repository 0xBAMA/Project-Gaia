// Generated by CoffeeScript 1.10.0
(function() {
  ProjectGaia.VoxelModel = (function() {
    function VoxelModel(options) {
      var parser;
      this.options = options;
      this.options.loadingManager.itemStart(this.options.url);
      parser = new vox.Parser();
      parser.parse(this.options.url).then((function(_this) {
        return function(data) {
          var color, i, j, k, l, len, materialIndex, materialProperties, ref, ref1, ref2, ref3, voxel, x, y, z;
          _this.width = data.size.x;
          _this.height = data.size.z;
          _this.depth = data.size.y;
          _this.sizeVector = new THREE.Vector3().copy(data.size);
          _this.colors = (function() {
            var i, len, ref, results;
            ref = data.palette;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              color = ref[i];
              results.push(new THREE.Color().setIntegerRGB(color));
            }
            return results;
          })();
          _this.blocks = [];
          for (x = i = 0, ref = _this.width; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
            _this.blocks[x] = [];
            for (y = j = 0, ref1 = _this.height; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
              _this.blocks[x][y] = [];
              for (z = k = 0, ref2 = _this.depth; 0 <= ref2 ? k < ref2 : k > ref2; z = 0 <= ref2 ? ++k : --k) {
                _this.blocks[x][y][z] = {
                  type: 0,
                  material: 0
                };
              }
            }
          }
          ref3 = data.voxels;
          for (l = 0, len = ref3.length; l < len; l++) {
            voxel = ref3[l];
            materialIndex = ProjectGaia.VoxelWorld.getMaterialIndexForColor(_this.colors[voxel.colorIndex]);
            if (materialIndex == null) {
              materialIndex = ProjectGaia.VoxelWorld.registerCustomMaterial(_this.colors[voxel.colorIndex]);
            }
            materialProperties = ProjectGaia.VoxelWorld.BlockMaterialProperties[materialIndex];
            _this.blocks[voxel.x][voxel.z][_this.depth - 1 - voxel.y] = {
              material: materialIndex,
              type: materialProperties.blockType
            };
          }
          return _this.options.loadingManager.itemEnd(_this.options.url);
        };
      })(this));
    }

    return VoxelModel;

  })();

}).call(this);

//# sourceMappingURL=voxelmodel.js.map
